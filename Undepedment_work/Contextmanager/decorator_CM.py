"""
Создание Contextmanager посредством декоратора contextmanager
"""
from contextlib import contextmanager


@contextmanager  # Декоратор который превращает функция в Contextmanager
def foo():
    print("Процесс запуска инициализации , самый первый процесс, запускается в первую очередь")
    yield "Вернули строчку"  # Синтаксис который  может что то вернуть или не вернуть в зависимости от кода
    print(" здесь под капотом запускается метод __exit__  и выполняется блок кода который нужен для завершения"
          "программы выполняется последним ")

"""
Пример использования 
"""


if __name__ == '__main__':
    with foo() as CE:  # with запускает Contextmanager foo() and in CE Возвращает то,что вернул yeld,
        # если yeld ничего не вернул, то CE содержит None
        print("Здесь находится основной блок кода")  # здесь запускается основной блок кода
    print("Что у нас находится в CE", CE)  # остальная программа
