Start project with django:

django-admin startproject name_your-project

После старта создается один большой проект где мы можем размещать свои сайты или сайт или страницу или страницы ( апликации)

для старта  апликации набираем команду 

python manage.py startapp имя_mysait

Создается пэкэдж имя_mysait, и его нужно зарегистрировать в основных настройках

в папке settings основного проекта прописываем путь как на  примере:

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mysait.apps.MysaitConfig',  #  прописываем сюда свою апликацию
]


Помечаем в пайчарм коренную папку как source root

django-admin --help  список доступных комманд
 check
    compilemessages
    createcachetable
    dbshell
    diffsettings
    dumpdata
    flush
    inspectdb
    loaddata
    makemessages
    makemigrations   Создать миграция
    migrate          Запускает все необходтмые миграции
    runserver        Запускает сервер на основе Джанго
    sendtestemail
    shell            Запускается  консоль Джанго для работы  с таблицами
    showmigrations
    sqlflush
    sqlmigrate        Позволяет посмотреть на таблицу после создание миграции  как она будет создана
    sqlsequencereset
    squashmigrations
    startapp          Запускает апликацию на проекте где которую нужно регистрировать в основном проекте и прописывать настройки к основному проекту
    startproject      Запускает проект на Джанго с настройками всего проекта 
    test
    testserver
    
    Назначить другой порт для Джаного можно командой:
    
    python manage.py runserver 127.1.1.1:4000 где 127.1.1.1 - это адресс а - 4000 это тот порт где нужно бежать джанго,  можно написать только порт тогда адрес по умолчанию будет localhost 
    
   просмотр записей при сохранении в таблицу пишется в редакторе shell:
   
   Для работы с shell:
   
    from mysait.models import MyModel  # импортировали модель  из нашей апликации

   
   from django.db import connection
>>> connection.queries
 Получить значение из базы данных:
 
 MyModel.objects.filter(pk=1).values()  # Значение filter позволяет фильтровать выборку по столбацам в данном примере будет выбрано только поле с id = 1;
 
 MyModel.objects.filter(name_person="alex")  # Запрос
<QuerySet [<MyModel:  person : alex Moiseev>]>  # возврат значения 

 
 
Создание обьекта в добавления в базу :

1. Импортируем модель в шелл
2 создаем обьект , например:

 number1 = MyModel(name_person="alex", last_name="Moiseev", age=41, birth_year=date.today())
 number1.save()  # Команда которая сохраняет  обьект number1  in SQL
 
 Еще один способ создания и сразу добавления обьекта в базу через специальный обьект  object:
 
  MyModel.objects.create(name_person="Elena", last_name="Myzgina", age=35, birth_year=date.today())
  
 Для получения одной записи из таблицы используется команда:
 
  MyModel.objects.get(pk=3)   # метод  возращает get() третью запись из таблицы
  
  Для изменении записи в таблице необходимо через метод get получит обьект из БД и после к обращению атрибутам класса менять их и записать используя метод SAVE()
  
  mumber1 = MyModel.objects.get(pk=2)
  mumber1.name_person='Alex'
  <MyModel:  person : Alex Moiseev>
  
  
Удаление обьекта:

mumber1 = MyModel.objects.get(pk=2)
>>> mumber1.delete()
(1, {'mysait.MyModel': 1})


Создание суперпользователя

python manage.py createsuperuser

регистрируем свое приложение в файле admin.py прописываем там :
1. импортируем свою модель из папки  models.py
2. admin.site.regicter(MyModel)  #  где MyModel наша импортированная модел

class MyModel(models.Model):  # Наследуем от класса

    name_person = models.CharField(max_length=20)  # Создает текстовое поле с макс размером 20 символов
    last_name = models.CharField(max_length=30)  # Аналогично но с 30 символами
    age = models.IntegerField()  # сщздает поле с целыми числами
    birth_year = models.DateField()  # поле с датой
    photo_person = models.ImageField(upload_to='photos/%Y/')  # поле для загрузки с картинками
    update_date = models.DateTimeField(auto_now=True)  # поле в которое записывается время измененич
    hidden = models.BooleanField(default=True)  # пишется булево значение

    def __str__(self):
        return f" person : {self.name_person} {self.last_name}"

    class Meta:
        verbose_name = "Vip_Персона"  # Отображение в админке в единственном числе
        verbose_name_plural = "Vip_Персоны"  # Отображение в админке во множественном числе
        ordering = ['-age']
        
Собрать Всю статику в одном месте

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'myDJ/static'),
]

Запустить команду : python manage.py collectstatic





 
 
 



    
    




