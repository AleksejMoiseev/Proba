git show 85ca950 - Показать комит 85ca950
git commit --amend - Вносит изменения в последний коммит
git add -p - Добавление staging area путем последователдьного согласования всех изменений пользователя
git git restore --staged 1.txt - убрать подготовленный для комита файл 1.txt из staging area
git restore <file>..." - Удалить все изменения которые были сделаны в файле опасная команда все изменения удаляются без подверждения
git reset --hard 682896e Удалить все комиты после 682896e + удаляет все изменения в файле
git rebase -i 682896e позволяет менять удалять переписывать все коммиты начиная 682896e
git push origin master - Передача коммита на удаленный репозиторий
git branch test - Создание новой ветке (branch) c именем test
git checkout test - переключаемся на бранч ветку с именем "test"
git checkout -b testin - Создает ветку testin  и переключается на нее
git merge test - слияние ветки test  с веткой master, перед слиянием нужно находится в ветке  master
git branch -d test - Удаление побочной ветки test  после слияния с веткой мастер, если в ветке есть изменения которых нет в ветке мастер, удаление не произойдет
git branch -D test - беспрекословное удаление бранча test
git push --delete origin test - После удаления в локальной директории необходимо удалить принудительно в удаленном репозитории. Без этой команды  удалится только из локальной директории
git remote -v Показывает удаленный репозиторий с которым мы работаем
пример:
origin	https://github.com/AleksejMoiseev/PYTHON.git (fetch)
origin	https://github.com/AleksejMoiseev/PYTHON.git (push)

git remote add - добавляет удаленный репозитари remote 
git pull origin master  приносит пользователю все изменения с удаленного репозитория origin на ветке master
git push origin master заливает все изменения на удаленный репозиторий в githab
pwd - показывает путь кто где находится 
git push --force origin master  заливает изменения на удаленный репозитрий без проверки, меняет удаленный репозиторий под изменения заливаемы пользователем - супер опасно - возврата нет

git rebase master  сначала необходимо встать на свой бранч который мы собираемся сливать с веткой тмастер командой git checkout имя бранча  после набираем эту команду и  git  переносит нас на последний коммит ветки мастер если нет конфликтов
после этого  можно мержить с мастером  что бы стала одна ветка мастер fast forvard commit :
git branch - смотрим какие ветки у нас в наличии 
git branch test  создаем ветку с именем  test 
git checkout master переключение на ветку master
git merge имя побочного бранча

git branch -d имя ветки - удаляет из локального репозитория ветку см именем ветки

git pull --rebase  приносит изменения с удаленного репозитория с пименением  rebase  и последующим fast forvard 

git fetch upstream  приносит изменение в локальный репозиторий пользователя upstream значит удаленный после команда:
                    git rebase upstream/имя репозитория с какого ходим принести изменения 
git tag lesha Установить метку на последнем коммите
git tag lesha номер коммита  установить метку на указаном коммите, нужно чтобы быстро кому нибудь находить нужный коммит

git remote add upstream ссылка на удаленный репозиторий    - добавляем к себе удаленный репозиторий и называем его (upstream - удаленный) дальше используем команду pull чтобы приносить с него изменения 

git clone https://github.com/AleksejMoiseev/git-exercise.git  клонирование репозитория к себе на машину

git remote add upstream https://github.com/bentsi/git-exercise.git создания ссылки на удаленый репозиторий с которого был форк с целью обновлятся и приносить изменения к себе на машину и в дальнейшем делать pull реквест


git push --tags origin master Синхронизирует локальные тэги с удаленным репозиторием
